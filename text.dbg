eval: (if (good-enough? guess,x) guess (sqrt-iter (improve guess,x),x))
eval: (good-enough? guess,x)
eval: guess
eval: 3
res: Ok(Number(3.0))
res: Ok(Number(3.0))
eval: x
eval: 9
res: Ok(Number(9.0))
res: Ok(Number(9.0))

eval: (< (abs (- (square guess),x)),0.001)
eval: (abs (- (square guess),x))
res: Err("Undefined procedure1: \"abs\".")
res: Err("Undefined procedure1: \"abs\".")
res: Err("Undefined procedure1: \"abs\".")
eval: (sqrt-iter (improve guess,x),x)
eval: (improve guess,x)
eval: guess
eval: 3
res: Ok(Number(3.0))
res: Ok(Number(3.0))
eval: x
eval: 9
res: Ok(Number(9.0))
res: Ok(Number(9.0))
eval: (average guess,(/ x,guess))
eval: guess
eval: 3
res: Ok(Number(3.0))
res: Ok(Number(3.0))
eval: (/ x,guess)
eval: x
eval: 9
res: Ok(Number(9.0))
res: Ok(Number(9.0))
eval: guess
eval: 3
res: Ok(Number(3.0))
res: Ok(Number(3.0))
res: Ok(Number(3.0))
eval: (/ (+ x,y),2)
eval: (+ x,y)
eval: x
eval: 3
res: Ok(Number(3.0))
res: Ok(Number(3.0))
eval: y
eval: 3
res: Ok(Number(3.0))
res: Ok(Number(3.0))
res: Ok(Number(6.0))
eval: 2
res: Ok(Number(2.0))
res: Ok(Number(3.0))
res: Ok(Number(3.0))
res: Ok(Number(3.0))
eval: x
eval: 9
res: Ok(Number(9.0))
res: Ok(Number(9.0))